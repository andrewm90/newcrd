Name:         ciliumnetworkpolicies.cilium.io
Namespace:    
Labels:       io.cilium.k8s.crd.schema.version=1.24.3
Annotations:  <none>
API Version:  apiextensions.k8s.io/v1
Kind:         CustomResourceDefinition
Metadata:
  Creation Timestamp:  2022-11-04T03:45:13Z
  Generation:          1
  Managed Fields:
    API Version:  apiextensions.k8s.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:metadata:
        f:labels:
          .:
          f:io.cilium.k8s.crd.schema.version:
      f:spec:
        f:conversion:
          .:
          f:strategy:
        f:group:
        f:names:
          f:kind:
          f:listKind:
          f:plural:
          f:shortNames:
          f:singular:
        f:scope:
        f:versions:
    Manager:      cilium-operator-generic
    Operation:    Update
    Time:         2022-11-04T03:45:13Z
    API Version:  apiextensions.k8s.io/v1
    Fields Type:  FieldsV1
    fieldsV1:
      f:status:
        f:acceptedNames:
          f:kind:
          f:listKind:
          f:plural:
          f:shortNames:
          f:singular:
        f:conditions:
          k:{"type":"Established"}:
            .:
            f:lastTransitionTime:
            f:message:
            f:reason:
            f:status:
            f:type:
          k:{"type":"NamesAccepted"}:
            .:
            f:lastTransitionTime:
            f:message:
            f:reason:
            f:status:
            f:type:
    Manager:         kube-apiserver
    Operation:       Update
    Subresource:     status
    Time:            2022-11-04T03:45:13Z
  Resource Version:  173920
  UID:               e734d742-4add-497a-a8ca-dad697a7977d
Spec:
  Conversion:
    Strategy:  None
  Group:       cilium.io
  Names:
    Kind:       CiliumNetworkPolicy
    List Kind:  CiliumNetworkPolicyList
    Plural:     ciliumnetworkpolicies
    Short Names:
      cnp
      ciliumnp
    Singular:  ciliumnetworkpolicy
  Scope:       Namespaced
  Versions:
    Additional Printer Columns:
      Json Path:  .metadata.creationTimestamp
      Name:       Age
      Type:       date
    Name:         v2
    Schema:
      openAPIV3Schema:
        Description:  CiliumNetworkPolicy is a Kubernetes third-party resource with an extended version of NetworkPolicy.
        Properties:
          API Version:
            Description:  APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            Type:         string
          Kind:
            Description:  Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            Type:         string
          Metadata:
            Type:  object
          Spec:
            Description:  Spec is the desired Cilium specific rule specification.
            One Of:
              Properties:
                Endpoint Selector:
              Required:
                endpointSelector
              Properties:
                Node Selector:
              Required:
                nodeSelector
            Properties:
              Description:
                Description:  Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.
                Type:         string
              Egress:
                Description:  Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.
                Items:
                  Description:  EgressRule contains all rule types which can be applied at egress, i.e. network traffic that originates inside the endpoint and exits the endpoint selected by the endpointSelector. 
 - All members of this structure are optional. If omitted or empty, the   member will have no effect on the rule. 
 - If multiple members of the structure are specified, then all members   must match in order for the rule to take effect. The exception to this   rule is the ToRequires member; the effects of any Requires field in any   rule will apply to all other rules as well. 
 - ToEndpoints, ToCIDR, ToCIDRSet, ToEntities, ToServices and ToGroups are   mutually exclusive. Only one of these members may be present within an   individual rule.
                  Properties:
                    Icmps:
                      Description:  ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. 
 Example: Any endpoint with the label "app=httpd" is allowed to initiate type 8 ICMP connections.
                      Items:
                        Description:  ICMPRule is a list of ICMP fields.
                        Properties:
                          Fields:
                            Description:  Fields is a list of ICMP fields.
                            Items:
                              Description:  ICMPField is a ICMP field.
                              Properties:
                                Family:
                                  Default:      IPv4
                                  Description:  Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
                                  Enum:
                                    IPv4
                                    IPv6
                                  Type:  string
                                Type:
                                  Description:  Type is a ICMP-type. It should be 0-255 (8bit).
                                  Maximum:      255
                                  Minimum:      0
                                  Type:         integer
                              Required:
                                type
                              Type:  object
                            Type:    array
                        Type:        object
                      Type:          array
                    To CIDR:
                      Description:  ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
 Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24
                      Items:
                        Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                        Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                        Type:         string
                      Type:           array
                    To CIDR Set:
                      Description:  ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
 Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.
                      Items:
                        Description:  CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.
                        Properties:
                          Cidr:
                            Description:  CIDR is a CIDR prefix / IP Block.
                            Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                            Type:         string
                          Except:
                            Description:  ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
                            Items:
                              Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                              Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                              Type:         string
                            Type:           array
                        Required:
                          cidr
                        Type:  object
                      Type:    array
                    To Endpoints:
                      Description:  ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. 
 Example: Any endpoint with the label "role=frontend" can communicate with any endpoint carrying the label "role=backend".
                      Items:
                        Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Enum:
                                    In
                                    NotIn
                                    Exists
                                    DoesNotExist
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                  Items:
                                    Type:  string
                                  Type:    array
                              Required:
                                key
                                operator
                              Type:  object
                            Type:    array
                          Match Labels:
                            Additional Properties:
                              Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                              Max Length:   63
                              Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                              Type:         string
                            Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:           object
                        Type:               object
                      Type:                 array
                    To Entities:
                      Description:  ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster` and `host`
                      Items:
                        Description:  Entity specifies the class of receiver/sender endpoints that do not have individual identities.  Entities are used to describe "outside of cluster", "host", etc.
                        Enum:
                          all
                          world
                          cluster
                          host
                          init
                          unmanaged
                          remote-node
                          health
                          none
                          kube-apiserver
                        Type:  string
                      Type:    array
                    To FQD Ns:
                      Description:  ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of `ToFQDN.MatchName`s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -> IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. 
 The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.
                      Items:
                        Properties:
                          Match Name:
                            Description:  MatchName matches literal DNS names. A trailing "." is automatically added when missing.
                            Pattern:      ^([-a-zA-Z0-9_]+[.]?)+$
                            Type:         string
                          Match Pattern:
                            Description:  MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
 Examples: `*.cilium.io` matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains 1 level below   www.cilium.io, blog.cilium.io and cilium.io match, google.com does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not
                            Pattern:  ^([-a-zA-Z0-9_*]+[.]?)+$
                            Type:     string
                        Type:         object
                      Type:           array
                    To Groups:
                      Description:  ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
 Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'
                      Items:
                        Description:  ToGroups structure to store all kinds of new integrations that needs a new derivative policy.
                        Properties:
                          Aws:
                            Description:  AWSGroup is an structure that can be used to whitelisting information from AWS integration
                            Properties:
                              Labels:
                                Additional Properties:
                                  Type:  string
                                Type:    object
                              Region:
                                Type:  string
                              Security Groups Ids:
                                Items:
                                  Type:  string
                                Type:    array
                              Security Groups Names:
                                Items:
                                  Type:  string
                                Type:    array
                            Type:        object
                        Type:            object
                      Type:              array
                    To Ports:
                      Description:  ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. 
 Example: Any endpoint with the label "role=frontend" is allowed to initiate connections to destination port 8080/tcp
                      Items:
                        Description:  PortRule is a list of ports/protocol combinations with optional Layer 7 rules which must be met.
                        Properties:
                          Originating TLS:
                            Description:  OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.
                            Properties:
                              Certificate:
                                Description:  Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                              Private Key:
                                Description:  PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                              Secret:
                                Description:  Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.
                                Properties:
                                  Name:
                                    Description:  Name is the name of the secret.
                                    Type:         string
                                  Namespace:
                                    Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                    Type:         string
                                Required:
                                  name
                                Type:  object
                              Trusted CA:
                                Description:  TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                            Required:
                              secret
                            Type:  object
                          Ports:
                            Description:  Ports is a list of L4 port/protocol
                            Items:
                              Description:  PortProtocol specifies an L4 port with an optional transport protocol
                              Properties:
                                Port:
                                  Description:  Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form "1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.
                                  Pattern:      ^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$
                                  Type:         string
                                Protocol:
                                  Description:  Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", ""/"ANY" 
 Matching on ICMP is not supported. 
 Named port specified for a container may narrow this down, but may not contradict this.
                                  Enum:
                                    TCP
                                    UDP
                                    ANY
                                  Type:  string
                              Required:
                                port
                              Type:  object
                            Type:    array
                          Rules:
                            Description:  Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.
                            Properties:
                              Dns:
                                Description:  DNS-specific rules.
                                Items:
                                  Description:  PortRuleDNS is a list of allowed DNS lookups.
                                  Properties:
                                    Match Name:
                                      Description:  MatchName matches literal DNS names. A trailing "." is automatically added when missing.
                                      Pattern:      ^([-a-zA-Z0-9_]+[.]?)+$
                                      Type:         string
                                    Match Pattern:
                                      Description:  MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
 Examples: `*.cilium.io` matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains 1 level below   www.cilium.io, blog.cilium.io and cilium.io match, google.com does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not
                                      Pattern:  ^([-a-zA-Z0-9_*]+[.]?)+$
                                      Type:     string
                                  Type:         object
                                Type:           array
                              Http:
                                Description:  HTTP specific rules.
                                Items:
                                  Description:  PortRuleHTTP is a list of HTTP protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect. 
 All fields of this type are extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.
                                  Properties:
                                    Header Matches:
                                      Description:  HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.
                                      Items:
                                        Description:  HeaderMatch extends the HeaderValue for matching requirement of a named header field against an immediate string, a secret value, or a regex.  If none of the optional fields is present, then the header value is not matched, only presence of the header is enough.
                                        Properties:
                                          Mismatch:
                                            Description:  Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.
                                            Enum:
                                              LOG
                                              ADD
                                              DELETE
                                              REPLACE
                                            Type:  string
                                          Name:
                                            Description:  Name identifies the header.
                                            Type:         string
                                          Secret:
                                            Description:  Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no "Value" specified, the match will fail.
                                            Properties:
                                              Name:
                                                Description:  Name is the name of the secret.
                                                Type:         string
                                              Namespace:
                                                Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                                Type:         string
                                            Required:
                                              name
                                            Type:  object
                                          Value:
                                            Description:  Value matches the exact value of the header. Can be specified either alone or together with "Secret"; will be used as the header value if the secret can not be found in the latter case.
                                            Type:         string
                                        Required:
                                          name
                                        Type:  object
                                      Type:    array
                                    Headers:
                                      Description:  Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Host:
                                      Description:  Host is an extended POSIX regex matched against the host header of a request, e.g. "foo.com" 
 If omitted or empty, the value of the host header is ignored.
                                      Format:  idn-hostname
                                      Type:    string
                                    Method:
                                      Description:  Method is an extended POSIX regex matched against the method of a request, e.g. "GET", "POST", "PUT", "PATCH", "DELETE", ... 
 If omitted or empty, all methods are allowed.
                                      Type:  string
                                    Path:
                                      Description:  Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. 
 If omitted or empty, all paths are all allowed.
                                      Type:  string
                                  Type:      object
                                Type:        array
                              Kafka:
                                Description:  Kafka-specific rules.
                                Items:
                                  Description:  PortRule is a list of Kafka protocol constraints. All fields are optional, if all fields are empty or missing, the rule will match all Kafka messages.
                                  Properties:
                                    API Key:
                                      Description:  APIKey is a case-insensitive string matched against the key of a request, e.g. "produce", "fetch", "createtopic", "deletetopic", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys 
 If omitted or empty, and if Role is not specified, then all keys are allowed.
                                      Type:  string
                                    API Version:
                                      Description:  APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. 
 If omitted or empty, all versions are allowed.
                                      Type:  string
                                    Client ID:
                                      Description:  ClientID is the client identifier as provided in the request. 
 From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. 
 If omitted or empty, all client identifiers are allowed.
                                      Type:  string
                                    Role:
                                      Description:  Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as "produce" or "consume". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. 
 The following values are supported:  - "produce": Allow producing to the topics specified in the rule  - "consume": Allow consuming from the topics specified in the rule 
 This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. 
 If omitted or empty, and if APIKey is not specified, then all keys are allowed.
                                      Enum:
                                        produce
                                        consume
                                      Type:  string
                                    Topic:
                                      Description:  Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. 
 This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. 
 Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. 
 If omitted or empty, all topics are allowed.
                                      Max Length:  255
                                      Type:        string
                                  Type:            object
                                Type:              array
                              l7:
                                Description:  Key-value pair rules.
                                Items:
                                  Additional Properties:
                                    Type:       string
                                  Description:  PortRuleL7 is a list of key-value pairs interpreted by a L7 protocol as protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect.
                                  Type:         object
                                Type:           array
                              l7proto:
                                Description:  Name of the L7 protocol for which the Key-value pair rules apply.
                                Type:         string
                            Type:             object
                          Terminating TLS:
                            Description:  TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.
                            Properties:
                              Certificate:
                                Description:  Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                              Private Key:
                                Description:  PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                              Secret:
                                Description:  Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.
                                Properties:
                                  Name:
                                    Description:  Name is the name of the secret.
                                    Type:         string
                                  Namespace:
                                    Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                    Type:         string
                                Required:
                                  name
                                Type:  object
                              Trusted CA:
                                Description:  TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                            Required:
                              secret
                            Type:  object
                        Type:      object
                      Type:        array
                    To Requires:
                      Description:  ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. 
 Example: Any Endpoint with the label "team=A" requires any endpoint to which it communicates to also carry the label "team=A".
                      Items:
                        Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Enum:
                                    In
                                    NotIn
                                    Exists
                                    DoesNotExist
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                  Items:
                                    Type:  string
                                  Type:    array
                              Required:
                                key
                                operator
                              Type:  object
                            Type:    array
                          Match Labels:
                            Additional Properties:
                              Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                              Max Length:   63
                              Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                              Type:         string
                            Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:           object
                        Type:               object
                      Type:                 array
                    To Services:
                      Description:  ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. 
 Example: Any endpoint with the label "app=backend-app" is allowed to initiate connections to all cidrs backing the "external-service" service
                      Items:
                        Description:  Service wraps around selectors for services
                        Properties:
                          k8sService:
                            Description:  K8sService selects service by name and namespace pair
                            Properties:
                              Namespace:
                                Type:  string
                              Service Name:
                                Type:  string
                            Type:      object
                          k8sServiceSelector:
                            Description:  K8sServiceSelector selects services by k8s labels and namespace
                            Properties:
                              Namespace:
                                Type:  string
                              Selector:
                                Description:  ServiceSelector is a label selector for k8s services
                                Properties:
                                  Match Expressions:
                                    Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                    Items:
                                      Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                      Properties:
                                        Key:
                                          Description:  key is the label key that the selector applies to.
                                          Type:         string
                                        Operator:
                                          Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                          Enum:
                                            In
                                            NotIn
                                            Exists
                                            DoesNotExist
                                          Type:  string
                                        Values:
                                          Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                          Items:
                                            Type:  string
                                          Type:    array
                                      Required:
                                        key
                                        operator
                                      Type:  object
                                    Type:    array
                                  Match Labels:
                                    Additional Properties:
                                      Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                      Max Length:   63
                                      Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                      Type:         string
                                    Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                    Type:           object
                                Type:               object
                            Required:
                              selector
                            Type:  object
                        Type:      object
                      Type:        array
                  Type:            object
                Type:              array
              Egress Deny:
                Description:  EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.
                Items:
                  Description:  EgressDenyRule contains all rule types which can be applied at egress, i.e. network traffic that originates inside the endpoint and exits the endpoint selected by the endpointSelector. 
 - All members of this structure are optional. If omitted or empty, the   member will have no effect on the rule. 
 - If multiple members of the structure are specified, then all members   must match in order for the rule to take effect. The exception to this   rule is the ToRequires member; the effects of any Requires field in any   rule will apply to all other rules as well. 
 - ToEndpoints, ToCIDR, ToCIDRSet, ToEntities, ToServices and ToGroups are   mutually exclusive. Only one of these members may be present within an   individual rule.
                  Properties:
                    Icmps:
                      Description:  ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. 
 Example: Any endpoint with the label "app=httpd" is not allowed to initiate type 8 ICMP connections.
                      Items:
                        Description:  ICMPRule is a list of ICMP fields.
                        Properties:
                          Fields:
                            Description:  Fields is a list of ICMP fields.
                            Items:
                              Description:  ICMPField is a ICMP field.
                              Properties:
                                Family:
                                  Default:      IPv4
                                  Description:  Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
                                  Enum:
                                    IPv4
                                    IPv6
                                  Type:  string
                                Type:
                                  Description:  Type is a ICMP-type. It should be 0-255 (8bit).
                                  Maximum:      255
                                  Minimum:      0
                                  Type:         integer
                              Required:
                                type
                              Type:  object
                            Type:    array
                        Type:        object
                      Type:          array
                    To CIDR:
                      Description:  ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
 Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24
                      Items:
                        Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                        Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                        Type:         string
                      Type:           array
                    To CIDR Set:
                      Description:  ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
 Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.
                      Items:
                        Description:  CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.
                        Properties:
                          Cidr:
                            Description:  CIDR is a CIDR prefix / IP Block.
                            Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                            Type:         string
                          Except:
                            Description:  ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
                            Items:
                              Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                              Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                              Type:         string
                            Type:           array
                        Required:
                          cidr
                        Type:  object
                      Type:    array
                    To Endpoints:
                      Description:  ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. 
 Example: Any endpoint with the label "role=frontend" can communicate with any endpoint carrying the label "role=backend".
                      Items:
                        Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Enum:
                                    In
                                    NotIn
                                    Exists
                                    DoesNotExist
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                  Items:
                                    Type:  string
                                  Type:    array
                              Required:
                                key
                                operator
                              Type:  object
                            Type:    array
                          Match Labels:
                            Additional Properties:
                              Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                              Max Length:   63
                              Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                              Type:         string
                            Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:           object
                        Type:               object
                      Type:                 array
                    To Entities:
                      Description:  ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster` and `host`
                      Items:
                        Description:  Entity specifies the class of receiver/sender endpoints that do not have individual identities.  Entities are used to describe "outside of cluster", "host", etc.
                        Enum:
                          all
                          world
                          cluster
                          host
                          init
                          unmanaged
                          remote-node
                          health
                          none
                          kube-apiserver
                        Type:  string
                      Type:    array
                    To Groups:
                      Description:  ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
 Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'
                      Items:
                        Description:  ToGroups structure to store all kinds of new integrations that needs a new derivative policy.
                        Properties:
                          Aws:
                            Description:  AWSGroup is an structure that can be used to whitelisting information from AWS integration
                            Properties:
                              Labels:
                                Additional Properties:
                                  Type:  string
                                Type:    object
                              Region:
                                Type:  string
                              Security Groups Ids:
                                Items:
                                  Type:  string
                                Type:    array
                              Security Groups Names:
                                Items:
                                  Type:  string
                                Type:    array
                            Type:        object
                        Type:            object
                      Type:              array
                    To Ports:
                      Description:  ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. 
 Example: Any endpoint with the label "role=frontend" is not allowed to initiate connections to destination port 8080/tcp
                      Items:
                        Description:  PortDenyRule is a list of ports/protocol that should be used for deny policies. This structure lacks the L7Rules since it's not supported in deny policies.
                        Properties:
                          Ports:
                            Description:  Ports is a list of L4 port/protocol
                            Items:
                              Description:  PortProtocol specifies an L4 port with an optional transport protocol
                              Properties:
                                Port:
                                  Description:  Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form "1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.
                                  Pattern:      ^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$
                                  Type:         string
                                Protocol:
                                  Description:  Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", ""/"ANY" 
 Matching on ICMP is not supported. 
 Named port specified for a container may narrow this down, but may not contradict this.
                                  Enum:
                                    TCP
                                    UDP
                                    ANY
                                  Type:  string
                              Required:
                                port
                              Type:  object
                            Type:    array
                        Type:        object
                      Type:          array
                    To Requires:
                      Description:  ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. 
 Example: Any Endpoint with the label "team=A" requires any endpoint to which it communicates to also carry the label "team=A".
                      Items:
                        Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Enum:
                                    In
                                    NotIn
                                    Exists
                                    DoesNotExist
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                  Items:
                                    Type:  string
                                  Type:    array
                              Required:
                                key
                                operator
                              Type:  object
                            Type:    array
                          Match Labels:
                            Additional Properties:
                              Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                              Max Length:   63
                              Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                              Type:         string
                            Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:           object
                        Type:               object
                      Type:                 array
                    To Services:
                      Description:  ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. 
 Example: Any endpoint with the label "app=backend-app" is allowed to initiate connections to all cidrs backing the "external-service" service
                      Items:
                        Description:  Service wraps around selectors for services
                        Properties:
                          k8sService:
                            Description:  K8sService selects service by name and namespace pair
                            Properties:
                              Namespace:
                                Type:  string
                              Service Name:
                                Type:  string
                            Type:      object
                          k8sServiceSelector:
                            Description:  K8sServiceSelector selects services by k8s labels and namespace
                            Properties:
                              Namespace:
                                Type:  string
                              Selector:
                                Description:  ServiceSelector is a label selector for k8s services
                                Properties:
                                  Match Expressions:
                                    Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                    Items:
                                      Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                      Properties:
                                        Key:
                                          Description:  key is the label key that the selector applies to.
                                          Type:         string
                                        Operator:
                                          Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                          Enum:
                                            In
                                            NotIn
                                            Exists
                                            DoesNotExist
                                          Type:  string
                                        Values:
                                          Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                          Items:
                                            Type:  string
                                          Type:    array
                                      Required:
                                        key
                                        operator
                                      Type:  object
                                    Type:    array
                                  Match Labels:
                                    Additional Properties:
                                      Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                      Max Length:   63
                                      Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                      Type:         string
                                    Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                    Type:           object
                                Type:               object
                            Required:
                              selector
                            Type:  object
                        Type:      object
                      Type:        array
                  Type:            object
                Type:              array
              Endpoint Selector:
                Description:  EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.
                Properties:
                  Match Expressions:
                    Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    Items:
                      Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      Properties:
                        Key:
                          Description:  key is the label key that the selector applies to.
                          Type:         string
                        Operator:
                          Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          Enum:
                            In
                            NotIn
                            Exists
                            DoesNotExist
                          Type:  string
                        Values:
                          Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          Items:
                            Type:  string
                          Type:    array
                      Required:
                        key
                        operator
                      Type:  object
                    Type:    array
                  Match Labels:
                    Additional Properties:
                      Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                      Max Length:   63
                      Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                      Type:         string
                    Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    Type:           object
                Type:               object
              Ingress:
                Description:  Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.
                Items:
                  Description:  IngressRule contains all rule types which can be applied at ingress, i.e. network traffic that originates outside of the endpoint and is entering the endpoint selected by the endpointSelector. 
 - All members of this structure are optional. If omitted or empty, the   member will have no effect on the rule. 
 - If multiple members are set, all of them need to match in order for   the rule to take effect. The exception to this rule is FromRequires field;   the effects of any Requires field in any rule will apply to all other   rules as well. 
 - FromEndpoints, FromCIDR, FromCIDRSet and FromEntities are mutually   exclusive. Only one of these members may be present within an individual   rule.
                  Properties:
                    From CIDR:
                      Description:  FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. 
 Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.3.9.1
                      Items:
                        Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                        Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                        Type:         string
                      Type:           array
                    From CIDR Set:
                      Description:  FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. 
 Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.
                      Items:
                        Description:  CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.
                        Properties:
                          Cidr:
                            Description:  CIDR is a CIDR prefix / IP Block.
                            Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                            Type:         string
                          Except:
                            Description:  ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
                            Items:
                              Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                              Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                              Type:         string
                            Type:           array
                        Required:
                          cidr
                        Type:  object
                      Type:    array
                    From Endpoints:
                      Description:  FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. 
 Example: Any endpoint with the label "role=backend" can be consumed by any endpoint carrying the label "role=frontend".
                      Items:
                        Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Enum:
                                    In
                                    NotIn
                                    Exists
                                    DoesNotExist
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                  Items:
                                    Type:  string
                                  Type:    array
                              Required:
                                key
                                operator
                              Type:  object
                            Type:    array
                          Match Labels:
                            Additional Properties:
                              Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                              Max Length:   63
                              Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                              Type:         string
                            Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:           object
                        Type:               object
                      Type:                 array
                    From Entities:
                      Description:  FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`
                      Items:
                        Description:  Entity specifies the class of receiver/sender endpoints that do not have individual identities.  Entities are used to describe "outside of cluster", "host", etc.
                        Enum:
                          all
                          world
                          cluster
                          host
                          init
                          unmanaged
                          remote-node
                          health
                          none
                          kube-apiserver
                        Type:  string
                      Type:    array
                    From Requires:
                      Description:  FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. 
 Example: Any Endpoint with the label "team=A" requires consuming endpoint to also carry the label "team=A".
                      Items:
                        Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Enum:
                                    In
                                    NotIn
                                    Exists
                                    DoesNotExist
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                  Items:
                                    Type:  string
                                  Type:    array
                              Required:
                                key
                                operator
                              Type:  object
                            Type:    array
                          Match Labels:
                            Additional Properties:
                              Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                              Max Length:   63
                              Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                              Type:         string
                            Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:           object
                        Type:               object
                      Type:                 array
                    Icmps:
                      Description:  ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. 
 Example: Any endpoint with the label "app=httpd" can only accept incoming type 8 ICMP connections.
                      Items:
                        Description:  ICMPRule is a list of ICMP fields.
                        Properties:
                          Fields:
                            Description:  Fields is a list of ICMP fields.
                            Items:
                              Description:  ICMPField is a ICMP field.
                              Properties:
                                Family:
                                  Default:      IPv4
                                  Description:  Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
                                  Enum:
                                    IPv4
                                    IPv6
                                  Type:  string
                                Type:
                                  Description:  Type is a ICMP-type. It should be 0-255 (8bit).
                                  Maximum:      255
                                  Minimum:      0
                                  Type:         integer
                              Required:
                                type
                              Type:  object
                            Type:    array
                        Type:        object
                      Type:          array
                    To Ports:
                      Description:  ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. 
 Example: Any endpoint with the label "app=httpd" can only accept incoming connections on port 80/tcp.
                      Items:
                        Description:  PortRule is a list of ports/protocol combinations with optional Layer 7 rules which must be met.
                        Properties:
                          Originating TLS:
                            Description:  OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.
                            Properties:
                              Certificate:
                                Description:  Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                              Private Key:
                                Description:  PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                              Secret:
                                Description:  Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.
                                Properties:
                                  Name:
                                    Description:  Name is the name of the secret.
                                    Type:         string
                                  Namespace:
                                    Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                    Type:         string
                                Required:
                                  name
                                Type:  object
                              Trusted CA:
                                Description:  TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                            Required:
                              secret
                            Type:  object
                          Ports:
                            Description:  Ports is a list of L4 port/protocol
                            Items:
                              Description:  PortProtocol specifies an L4 port with an optional transport protocol
                              Properties:
                                Port:
                                  Description:  Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form "1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.
                                  Pattern:      ^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$
                                  Type:         string
                                Protocol:
                                  Description:  Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", ""/"ANY" 
 Matching on ICMP is not supported. 
 Named port specified for a container may narrow this down, but may not contradict this.
                                  Enum:
                                    TCP
                                    UDP
                                    ANY
                                  Type:  string
                              Required:
                                port
                              Type:  object
                            Type:    array
                          Rules:
                            Description:  Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.
                            Properties:
                              Dns:
                                Description:  DNS-specific rules.
                                Items:
                                  Description:  PortRuleDNS is a list of allowed DNS lookups.
                                  Properties:
                                    Match Name:
                                      Description:  MatchName matches literal DNS names. A trailing "." is automatically added when missing.
                                      Pattern:      ^([-a-zA-Z0-9_]+[.]?)+$
                                      Type:         string
                                    Match Pattern:
                                      Description:  MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
 Examples: `*.cilium.io` matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains 1 level below   www.cilium.io, blog.cilium.io and cilium.io match, google.com does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not
                                      Pattern:  ^([-a-zA-Z0-9_*]+[.]?)+$
                                      Type:     string
                                  Type:         object
                                Type:           array
                              Http:
                                Description:  HTTP specific rules.
                                Items:
                                  Description:  PortRuleHTTP is a list of HTTP protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect. 
 All fields of this type are extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.
                                  Properties:
                                    Header Matches:
                                      Description:  HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.
                                      Items:
                                        Description:  HeaderMatch extends the HeaderValue for matching requirement of a named header field against an immediate string, a secret value, or a regex.  If none of the optional fields is present, then the header value is not matched, only presence of the header is enough.
                                        Properties:
                                          Mismatch:
                                            Description:  Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.
                                            Enum:
                                              LOG
                                              ADD
                                              DELETE
                                              REPLACE
                                            Type:  string
                                          Name:
                                            Description:  Name identifies the header.
                                            Type:         string
                                          Secret:
                                            Description:  Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no "Value" specified, the match will fail.
                                            Properties:
                                              Name:
                                                Description:  Name is the name of the secret.
                                                Type:         string
                                              Namespace:
                                                Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                                Type:         string
                                            Required:
                                              name
                                            Type:  object
                                          Value:
                                            Description:  Value matches the exact value of the header. Can be specified either alone or together with "Secret"; will be used as the header value if the secret can not be found in the latter case.
                                            Type:         string
                                        Required:
                                          name
                                        Type:  object
                                      Type:    array
                                    Headers:
                                      Description:  Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.
                                      Items:
                                        Type:  string
                                      Type:    array
                                    Host:
                                      Description:  Host is an extended POSIX regex matched against the host header of a request, e.g. "foo.com" 
 If omitted or empty, the value of the host header is ignored.
                                      Format:  idn-hostname
                                      Type:    string
                                    Method:
                                      Description:  Method is an extended POSIX regex matched against the method of a request, e.g. "GET", "POST", "PUT", "PATCH", "DELETE", ... 
 If omitted or empty, all methods are allowed.
                                      Type:  string
                                    Path:
                                      Description:  Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. 
 If omitted or empty, all paths are all allowed.
                                      Type:  string
                                  Type:      object
                                Type:        array
                              Kafka:
                                Description:  Kafka-specific rules.
                                Items:
                                  Description:  PortRule is a list of Kafka protocol constraints. All fields are optional, if all fields are empty or missing, the rule will match all Kafka messages.
                                  Properties:
                                    API Key:
                                      Description:  APIKey is a case-insensitive string matched against the key of a request, e.g. "produce", "fetch", "createtopic", "deletetopic", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys 
 If omitted or empty, and if Role is not specified, then all keys are allowed.
                                      Type:  string
                                    API Version:
                                      Description:  APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. 
 If omitted or empty, all versions are allowed.
                                      Type:  string
                                    Client ID:
                                      Description:  ClientID is the client identifier as provided in the request. 
 From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. 
 If omitted or empty, all client identifiers are allowed.
                                      Type:  string
                                    Role:
                                      Description:  Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as "produce" or "consume". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. 
 The following values are supported:  - "produce": Allow producing to the topics specified in the rule  - "consume": Allow consuming from the topics specified in the rule 
 This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. 
 If omitted or empty, and if APIKey is not specified, then all keys are allowed.
                                      Enum:
                                        produce
                                        consume
                                      Type:  string
                                    Topic:
                                      Description:  Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. 
 This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. 
 Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. 
 If omitted or empty, all topics are allowed.
                                      Max Length:  255
                                      Type:        string
                                  Type:            object
                                Type:              array
                              l7:
                                Description:  Key-value pair rules.
                                Items:
                                  Additional Properties:
                                    Type:       string
                                  Description:  PortRuleL7 is a list of key-value pairs interpreted by a L7 protocol as protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect.
                                  Type:         object
                                Type:           array
                              l7proto:
                                Description:  Name of the L7 protocol for which the Key-value pair rules apply.
                                Type:         string
                            Type:             object
                          Terminating TLS:
                            Description:  TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.
                            Properties:
                              Certificate:
                                Description:  Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                              Private Key:
                                Description:  PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                              Secret:
                                Description:  Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.
                                Properties:
                                  Name:
                                    Description:  Name is the name of the secret.
                                    Type:         string
                                  Namespace:
                                    Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                    Type:         string
                                Required:
                                  name
                                Type:  object
                              Trusted CA:
                                Description:  TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
                                Type:         string
                            Required:
                              secret
                            Type:  object
                        Type:      object
                      Type:        array
                  Type:            object
                Type:              array
              Ingress Deny:
                Description:  IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.
                Items:
                  Description:  IngressDenyRule contains all rule types which can be applied at ingress, i.e. network traffic that originates outside of the endpoint and is entering the endpoint selected by the endpointSelector. 
 - All members of this structure are optional. If omitted or empty, the   member will have no effect on the rule. 
 - If multiple members are set, all of them need to match in order for   the rule to take effect. The exception to this rule is FromRequires field;   the effects of any Requires field in any rule will apply to all other   rules as well. 
 - FromEndpoints, FromCIDR, FromCIDRSet and FromEntities are mutually   exclusive. Only one of these members may be present within an individual   rule.
                  Properties:
                    From CIDR:
                      Description:  FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. 
 Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.3.9.1
                      Items:
                        Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                        Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                        Type:         string
                      Type:           array
                    From CIDR Set:
                      Description:  FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. 
 Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.
                      Items:
                        Description:  CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.
                        Properties:
                          Cidr:
                            Description:  CIDR is a CIDR prefix / IP Block.
                            Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                            Type:         string
                          Except:
                            Description:  ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
                            Items:
                              Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                              Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                              Type:         string
                            Type:           array
                        Required:
                          cidr
                        Type:  object
                      Type:    array
                    From Endpoints:
                      Description:  FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. 
 Example: Any endpoint with the label "role=backend" can be consumed by any endpoint carrying the label "role=frontend".
                      Items:
                        Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Enum:
                                    In
                                    NotIn
                                    Exists
                                    DoesNotExist
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                  Items:
                                    Type:  string
                                  Type:    array
                              Required:
                                key
                                operator
                              Type:  object
                            Type:    array
                          Match Labels:
                            Additional Properties:
                              Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                              Max Length:   63
                              Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                              Type:         string
                            Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:           object
                        Type:               object
                      Type:                 array
                    From Entities:
                      Description:  FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`
                      Items:
                        Description:  Entity specifies the class of receiver/sender endpoints that do not have individual identities.  Entities are used to describe "outside of cluster", "host", etc.
                        Enum:
                          all
                          world
                          cluster
                          host
                          init
                          unmanaged
                          remote-node
                          health
                          none
                          kube-apiserver
                        Type:  string
                      Type:    array
                    From Requires:
                      Description:  FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. 
 Example: Any Endpoint with the label "team=A" requires consuming endpoint to also carry the label "team=A".
                      Items:
                        Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                        Properties:
                          Match Expressions:
                            Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                            Items:
                              Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                              Properties:
                                Key:
                                  Description:  key is the label key that the selector applies to.
                                  Type:         string
                                Operator:
                                  Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                  Enum:
                                    In
                                    NotIn
                                    Exists
                                    DoesNotExist
                                  Type:  string
                                Values:
                                  Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                  Items:
                                    Type:  string
                                  Type:    array
                              Required:
                                key
                                operator
                              Type:  object
                            Type:    array
                          Match Labels:
                            Additional Properties:
                              Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                              Max Length:   63
                              Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                              Type:         string
                            Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                            Type:           object
                        Type:               object
                      Type:                 array
                    Icmps:
                      Description:  ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. 
 Example: Any endpoint with the label "app=httpd" can not accept incoming type 8 ICMP connections.
                      Items:
                        Description:  ICMPRule is a list of ICMP fields.
                        Properties:
                          Fields:
                            Description:  Fields is a list of ICMP fields.
                            Items:
                              Description:  ICMPField is a ICMP field.
                              Properties:
                                Family:
                                  Default:      IPv4
                                  Description:  Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
                                  Enum:
                                    IPv4
                                    IPv6
                                  Type:  string
                                Type:
                                  Description:  Type is a ICMP-type. It should be 0-255 (8bit).
                                  Maximum:      255
                                  Minimum:      0
                                  Type:         integer
                              Required:
                                type
                              Type:  object
                            Type:    array
                        Type:        object
                      Type:          array
                    To Ports:
                      Description:  ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. 
 Example: Any endpoint with the label "app=httpd" can not accept incoming connections on port 80/tcp.
                      Items:
                        Description:  PortDenyRule is a list of ports/protocol that should be used for deny policies. This structure lacks the L7Rules since it's not supported in deny policies.
                        Properties:
                          Ports:
                            Description:  Ports is a list of L4 port/protocol
                            Items:
                              Description:  PortProtocol specifies an L4 port with an optional transport protocol
                              Properties:
                                Port:
                                  Description:  Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form "1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.
                                  Pattern:      ^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$
                                  Type:         string
                                Protocol:
                                  Description:  Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", ""/"ANY" 
 Matching on ICMP is not supported. 
 Named port specified for a container may narrow this down, but may not contradict this.
                                  Enum:
                                    TCP
                                    UDP
                                    ANY
                                  Type:  string
                              Required:
                                port
                              Type:  object
                            Type:    array
                        Type:        object
                      Type:          array
                  Type:              object
                Type:                array
              Labels:
                Description:  Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.
                Items:
                  Description:  Label is the Cilium's representation of a container label.
                  Properties:
                    Key:
                      Type:  string
                    Source:
                      Description:  Source can be one of the above values (e.g.: LabelSourceContainer).
                      Type:         string
                    Value:
                      Type:  string
                  Required:
                    key
                  Type:  object
                Type:    array
              Node Selector:
                Description:  NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.
                Properties:
                  Match Expressions:
                    Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                    Items:
                      Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                      Properties:
                        Key:
                          Description:  key is the label key that the selector applies to.
                          Type:         string
                        Operator:
                          Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                          Enum:
                            In
                            NotIn
                            Exists
                            DoesNotExist
                          Type:  string
                        Values:
                          Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                          Items:
                            Type:  string
                          Type:    array
                      Required:
                        key
                        operator
                      Type:  object
                    Type:    array
                  Match Labels:
                    Additional Properties:
                      Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                      Max Length:   63
                      Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                      Type:         string
                    Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                    Type:           object
                Type:               object
            Type:                   object
          Specs:
            Description:  Specs is a list of desired Cilium specific rule specification.
            Items:
              Description:  Rule is a policy rule which must be applied to all endpoints which match the labels contained in the endpointSelector 
 Each rule is split into an ingress section which contains all rules applicable at ingress, and an egress section applicable at egress. For rule types such as `L4Rule` and `CIDR` which can be applied at both ingress and egress, both ingress and egress side have to either specifically allow the connection or one side has to be omitted. 
 Either ingress, egress, or both can be provided. If both ingress and egress are omitted, the rule has no effect.
              One Of:
                Properties:
                  Endpoint Selector:
                Required:
                  endpointSelector
                Properties:
                  Node Selector:
                Required:
                  nodeSelector
              Properties:
                Description:
                  Description:  Description is a free form string, it can be used by the creator of the rule to store human readable explanation of the purpose of this rule. Rules cannot be identified by comment.
                  Type:         string
                Egress:
                  Description:  Egress is a list of EgressRule which are enforced at egress. If omitted or empty, this rule does not apply at egress.
                  Items:
                    Description:  EgressRule contains all rule types which can be applied at egress, i.e. network traffic that originates inside the endpoint and exits the endpoint selected by the endpointSelector. 
 - All members of this structure are optional. If omitted or empty, the   member will have no effect on the rule. 
 - If multiple members of the structure are specified, then all members   must match in order for the rule to take effect. The exception to this   rule is the ToRequires member; the effects of any Requires field in any   rule will apply to all other rules as well. 
 - ToEndpoints, ToCIDR, ToCIDRSet, ToEntities, ToServices and ToGroups are   mutually exclusive. Only one of these members may be present within an   individual rule.
                    Properties:
                      Icmps:
                        Description:  ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to connect to. 
 Example: Any endpoint with the label "app=httpd" is allowed to initiate type 8 ICMP connections.
                        Items:
                          Description:  ICMPRule is a list of ICMP fields.
                          Properties:
                            Fields:
                              Description:  Fields is a list of ICMP fields.
                              Items:
                                Description:  ICMPField is a ICMP field.
                                Properties:
                                  Family:
                                    Default:      IPv4
                                    Description:  Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
                                    Enum:
                                      IPv4
                                      IPv6
                                    Type:  string
                                  Type:
                                    Description:  Type is a ICMP-type. It should be 0-255 (8bit).
                                    Maximum:      255
                                    Minimum:      0
                                    Type:         integer
                                Required:
                                  type
                                Type:  object
                              Type:    array
                          Type:        object
                        Type:          array
                      To CIDR:
                        Description:  ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
 Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24
                        Items:
                          Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                          Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                          Type:         string
                        Type:           array
                      To CIDR Set:
                        Description:  ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
 Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.
                        Items:
                          Description:  CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.
                          Properties:
                            Cidr:
                              Description:  CIDR is a CIDR prefix / IP Block.
                              Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                              Type:         string
                            Except:
                              Description:  ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
                              Items:
                                Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                                Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                                Type:         string
                              Type:           array
                          Required:
                            cidr
                          Type:  object
                        Type:    array
                      To Endpoints:
                        Description:  ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. 
 Example: Any endpoint with the label "role=frontend" can communicate with any endpoint carrying the label "role=backend".
                        Items:
                          Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                          Properties:
                            Match Expressions:
                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              Items:
                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                Properties:
                                  Key:
                                    Description:  key is the label key that the selector applies to.
                                    Type:         string
                                  Operator:
                                    Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    Enum:
                                      In
                                      NotIn
                                      Exists
                                      DoesNotExist
                                    Type:  string
                                  Values:
                                    Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    Items:
                                      Type:  string
                                    Type:    array
                                Required:
                                  key
                                  operator
                                Type:  object
                              Type:    array
                            Match Labels:
                              Additional Properties:
                                Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                Max Length:   63
                                Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                Type:         string
                              Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              Type:           object
                          Type:               object
                        Type:                 array
                      To Entities:
                        Description:  ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster` and `host`
                        Items:
                          Description:  Entity specifies the class of receiver/sender endpoints that do not have individual identities.  Entities are used to describe "outside of cluster", "host", etc.
                          Enum:
                            all
                            world
                            cluster
                            host
                            init
                            unmanaged
                            remote-node
                            health
                            none
                            kube-apiserver
                          Type:  string
                        Type:    array
                      To FQD Ns:
                        Description:  ToFQDN allows whitelisting DNS names in place of IPs. The IPs that result from DNS resolution of `ToFQDN.MatchName`s are added to the same EgressRule object as ToCIDRSet entries, and behave accordingly. Any L4 and L7 rules within this EgressRule will also apply to these IPs. The DNS -> IP mapping is re-resolved periodically from within the cilium-agent, and the IPs in the DNS response are effected in the policy for selected pods as-is (i.e. the list of IPs is not modified in any way). Note: An explicit rule to allow for DNS traffic is needed for the pods, as ToFQDN counts as an egress rule and will enforce egress policy when PolicyEnforcment=default. Note: If the resolved IPs are IPs within the kubernetes cluster, the ToFQDN rule will not apply to that IP. Note: ToFQDN cannot occur in the same policy as other To* rules. 
 The current implementation has a number of limitations: - The DNS resolution originates from cilium-agent, and not from the pods. Differences between the responses seen by cilium agent and a particular pod will whitelist the incorrect IP. - DNS TTLs are ignored, and cilium-agent will repoll on a short interval (5 seconds). Each change to the DNS data will trigger a policy regeneration. This may result in delayed updates to the policy for an endpoint when the data changes often or the system is under load.
                        Items:
                          Properties:
                            Match Name:
                              Description:  MatchName matches literal DNS names. A trailing "." is automatically added when missing.
                              Pattern:      ^([-a-zA-Z0-9_]+[.]?)+$
                              Type:         string
                            Match Pattern:
                              Description:  MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
 Examples: `*.cilium.io` matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains 1 level below   www.cilium.io, blog.cilium.io and cilium.io match, google.com does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not
                              Pattern:  ^([-a-zA-Z0-9_*]+[.]?)+$
                              Type:     string
                          Type:         object
                        Type:           array
                      To Groups:
                        Description:  ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
 Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'
                        Items:
                          Description:  ToGroups structure to store all kinds of new integrations that needs a new derivative policy.
                          Properties:
                            Aws:
                              Description:  AWSGroup is an structure that can be used to whitelisting information from AWS integration
                              Properties:
                                Labels:
                                  Additional Properties:
                                    Type:  string
                                  Type:    object
                                Region:
                                  Type:  string
                                Security Groups Ids:
                                  Items:
                                    Type:  string
                                  Type:    array
                                Security Groups Names:
                                  Items:
                                    Type:  string
                                  Type:    array
                              Type:        object
                          Type:            object
                        Type:              array
                      To Ports:
                        Description:  ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to connect to. 
 Example: Any endpoint with the label "role=frontend" is allowed to initiate connections to destination port 8080/tcp
                        Items:
                          Description:  PortRule is a list of ports/protocol combinations with optional Layer 7 rules which must be met.
                          Properties:
                            Originating TLS:
                              Description:  OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.
                              Properties:
                                Certificate:
                                  Description:  Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                                Private Key:
                                  Description:  PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                                Secret:
                                  Description:  Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.
                                  Properties:
                                    Name:
                                      Description:  Name is the name of the secret.
                                      Type:         string
                                    Namespace:
                                      Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                      Type:         string
                                  Required:
                                    name
                                  Type:  object
                                Trusted CA:
                                  Description:  TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                              Required:
                                secret
                              Type:  object
                            Ports:
                              Description:  Ports is a list of L4 port/protocol
                              Items:
                                Description:  PortProtocol specifies an L4 port with an optional transport protocol
                                Properties:
                                  Port:
                                    Description:  Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form "1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.
                                    Pattern:      ^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$
                                    Type:         string
                                  Protocol:
                                    Description:  Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", ""/"ANY" 
 Matching on ICMP is not supported. 
 Named port specified for a container may narrow this down, but may not contradict this.
                                    Enum:
                                      TCP
                                      UDP
                                      ANY
                                    Type:  string
                                Required:
                                  port
                                Type:  object
                              Type:    array
                            Rules:
                              Description:  Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.
                              Properties:
                                Dns:
                                  Description:  DNS-specific rules.
                                  Items:
                                    Description:  PortRuleDNS is a list of allowed DNS lookups.
                                    Properties:
                                      Match Name:
                                        Description:  MatchName matches literal DNS names. A trailing "." is automatically added when missing.
                                        Pattern:      ^([-a-zA-Z0-9_]+[.]?)+$
                                        Type:         string
                                      Match Pattern:
                                        Description:  MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
 Examples: `*.cilium.io` matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains 1 level below   www.cilium.io, blog.cilium.io and cilium.io match, google.com does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not
                                        Pattern:  ^([-a-zA-Z0-9_*]+[.]?)+$
                                        Type:     string
                                    Type:         object
                                  Type:           array
                                Http:
                                  Description:  HTTP specific rules.
                                  Items:
                                    Description:  PortRuleHTTP is a list of HTTP protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect. 
 All fields of this type are extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.
                                    Properties:
                                      Header Matches:
                                        Description:  HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.
                                        Items:
                                          Description:  HeaderMatch extends the HeaderValue for matching requirement of a named header field against an immediate string, a secret value, or a regex.  If none of the optional fields is present, then the header value is not matched, only presence of the header is enough.
                                          Properties:
                                            Mismatch:
                                              Description:  Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.
                                              Enum:
                                                LOG
                                                ADD
                                                DELETE
                                                REPLACE
                                              Type:  string
                                            Name:
                                              Description:  Name identifies the header.
                                              Type:         string
                                            Secret:
                                              Description:  Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no "Value" specified, the match will fail.
                                              Properties:
                                                Name:
                                                  Description:  Name is the name of the secret.
                                                  Type:         string
                                                Namespace:
                                                  Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                                  Type:         string
                                              Required:
                                                name
                                              Type:  object
                                            Value:
                                              Description:  Value matches the exact value of the header. Can be specified either alone or together with "Secret"; will be used as the header value if the secret can not be found in the latter case.
                                              Type:         string
                                          Required:
                                            name
                                          Type:  object
                                        Type:    array
                                      Headers:
                                        Description:  Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.
                                        Items:
                                          Type:  string
                                        Type:    array
                                      Host:
                                        Description:  Host is an extended POSIX regex matched against the host header of a request, e.g. "foo.com" 
 If omitted or empty, the value of the host header is ignored.
                                        Format:  idn-hostname
                                        Type:    string
                                      Method:
                                        Description:  Method is an extended POSIX regex matched against the method of a request, e.g. "GET", "POST", "PUT", "PATCH", "DELETE", ... 
 If omitted or empty, all methods are allowed.
                                        Type:  string
                                      Path:
                                        Description:  Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. 
 If omitted or empty, all paths are all allowed.
                                        Type:  string
                                    Type:      object
                                  Type:        array
                                Kafka:
                                  Description:  Kafka-specific rules.
                                  Items:
                                    Description:  PortRule is a list of Kafka protocol constraints. All fields are optional, if all fields are empty or missing, the rule will match all Kafka messages.
                                    Properties:
                                      API Key:
                                        Description:  APIKey is a case-insensitive string matched against the key of a request, e.g. "produce", "fetch", "createtopic", "deletetopic", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys 
 If omitted or empty, and if Role is not specified, then all keys are allowed.
                                        Type:  string
                                      API Version:
                                        Description:  APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. 
 If omitted or empty, all versions are allowed.
                                        Type:  string
                                      Client ID:
                                        Description:  ClientID is the client identifier as provided in the request. 
 From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. 
 If omitted or empty, all client identifiers are allowed.
                                        Type:  string
                                      Role:
                                        Description:  Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as "produce" or "consume". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. 
 The following values are supported:  - "produce": Allow producing to the topics specified in the rule  - "consume": Allow consuming from the topics specified in the rule 
 This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. 
 If omitted or empty, and if APIKey is not specified, then all keys are allowed.
                                        Enum:
                                          produce
                                          consume
                                        Type:  string
                                      Topic:
                                        Description:  Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. 
 This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. 
 Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. 
 If omitted or empty, all topics are allowed.
                                        Max Length:  255
                                        Type:        string
                                    Type:            object
                                  Type:              array
                                l7:
                                  Description:  Key-value pair rules.
                                  Items:
                                    Additional Properties:
                                      Type:       string
                                    Description:  PortRuleL7 is a list of key-value pairs interpreted by a L7 protocol as protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect.
                                    Type:         object
                                  Type:           array
                                l7proto:
                                  Description:  Name of the L7 protocol for which the Key-value pair rules apply.
                                  Type:         string
                              Type:             object
                            Terminating TLS:
                              Description:  TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.
                              Properties:
                                Certificate:
                                  Description:  Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                                Private Key:
                                  Description:  PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                                Secret:
                                  Description:  Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.
                                  Properties:
                                    Name:
                                      Description:  Name is the name of the secret.
                                      Type:         string
                                    Namespace:
                                      Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                      Type:         string
                                  Required:
                                    name
                                  Type:  object
                                Trusted CA:
                                  Description:  TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                              Required:
                                secret
                              Type:  object
                          Type:      object
                        Type:        array
                      To Requires:
                        Description:  ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. 
 Example: Any Endpoint with the label "team=A" requires any endpoint to which it communicates to also carry the label "team=A".
                        Items:
                          Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                          Properties:
                            Match Expressions:
                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              Items:
                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                Properties:
                                  Key:
                                    Description:  key is the label key that the selector applies to.
                                    Type:         string
                                  Operator:
                                    Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    Enum:
                                      In
                                      NotIn
                                      Exists
                                      DoesNotExist
                                    Type:  string
                                  Values:
                                    Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    Items:
                                      Type:  string
                                    Type:    array
                                Required:
                                  key
                                  operator
                                Type:  object
                              Type:    array
                            Match Labels:
                              Additional Properties:
                                Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                Max Length:   63
                                Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                Type:         string
                              Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              Type:           object
                          Type:               object
                        Type:                 array
                      To Services:
                        Description:  ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. 
 Example: Any endpoint with the label "app=backend-app" is allowed to initiate connections to all cidrs backing the "external-service" service
                        Items:
                          Description:  Service wraps around selectors for services
                          Properties:
                            k8sService:
                              Description:  K8sService selects service by name and namespace pair
                              Properties:
                                Namespace:
                                  Type:  string
                                Service Name:
                                  Type:  string
                              Type:      object
                            k8sServiceSelector:
                              Description:  K8sServiceSelector selects services by k8s labels and namespace
                              Properties:
                                Namespace:
                                  Type:  string
                                Selector:
                                  Description:  ServiceSelector is a label selector for k8s services
                                  Properties:
                                    Match Expressions:
                                      Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      Items:
                                        Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        Properties:
                                          Key:
                                            Description:  key is the label key that the selector applies to.
                                            Type:         string
                                          Operator:
                                            Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            Enum:
                                              In
                                              NotIn
                                              Exists
                                              DoesNotExist
                                            Type:  string
                                          Values:
                                            Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            Items:
                                              Type:  string
                                            Type:    array
                                        Required:
                                          key
                                          operator
                                        Type:  object
                                      Type:    array
                                    Match Labels:
                                      Additional Properties:
                                        Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                        Max Length:   63
                                        Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                        Type:         string
                                      Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      Type:           object
                                  Type:               object
                              Required:
                                selector
                              Type:  object
                          Type:      object
                        Type:        array
                    Type:            object
                  Type:              array
                Egress Deny:
                  Description:  EgressDeny is a list of EgressDenyRule which are enforced at egress. Any rule inserted here will by denied regardless of the allowed egress rules in the 'egress' field. If omitted or empty, this rule does not apply at egress.
                  Items:
                    Description:  EgressDenyRule contains all rule types which can be applied at egress, i.e. network traffic that originates inside the endpoint and exits the endpoint selected by the endpointSelector. 
 - All members of this structure are optional. If omitted or empty, the   member will have no effect on the rule. 
 - If multiple members of the structure are specified, then all members   must match in order for the rule to take effect. The exception to this   rule is the ToRequires member; the effects of any Requires field in any   rule will apply to all other rules as well. 
 - ToEndpoints, ToCIDR, ToCIDRSet, ToEntities, ToServices and ToGroups are   mutually exclusive. Only one of these members may be present within an   individual rule.
                    Properties:
                      Icmps:
                        Description:  ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to connect to. 
 Example: Any endpoint with the label "app=httpd" is not allowed to initiate type 8 ICMP connections.
                        Items:
                          Description:  ICMPRule is a list of ICMP fields.
                          Properties:
                            Fields:
                              Description:  Fields is a list of ICMP fields.
                              Items:
                                Description:  ICMPField is a ICMP field.
                                Properties:
                                  Family:
                                    Default:      IPv4
                                    Description:  Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
                                    Enum:
                                      IPv4
                                      IPv6
                                    Type:  string
                                  Type:
                                    Description:  Type is a ICMP-type. It should be 0-255 (8bit).
                                    Maximum:      255
                                    Minimum:      0
                                    Type:         integer
                                Required:
                                  type
                                Type:  object
                              Type:    array
                          Type:        object
                        Type:          array
                      To CIDR:
                        Description:  ToCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections. Only connections destined for outside of the cluster and not targeting the host will be subject to CIDR rules.  This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
 Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24
                        Items:
                          Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                          Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                          Type:         string
                        Type:           array
                      To CIDR Set:
                        Description:  ToCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to initiate connections to in addition to connections which are allowed via ToEndpoints, along with a list of subnets contained within their corresponding IP block to which traffic should not be allowed. This will match on the destination IP address of outgoing connections. Adding a prefix into ToCIDR or into ToCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between ToCIDR and ToCIDRSet. 
 Example: Any endpoint with the label "app=database-proxy" is allowed to initiate connections to 10.2.3.0/24 except from IPs in subnet 10.2.3.0/28.
                        Items:
                          Description:  CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.
                          Properties:
                            Cidr:
                              Description:  CIDR is a CIDR prefix / IP Block.
                              Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                              Type:         string
                            Except:
                              Description:  ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
                              Items:
                                Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                                Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                                Type:         string
                              Type:           array
                          Required:
                            cidr
                          Type:  object
                        Type:    array
                      To Endpoints:
                        Description:  ToEndpoints is a list of endpoints identified by an EndpointSelector to which the endpoints subject to the rule are allowed to communicate. 
 Example: Any endpoint with the label "role=frontend" can communicate with any endpoint carrying the label "role=backend".
                        Items:
                          Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                          Properties:
                            Match Expressions:
                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              Items:
                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                Properties:
                                  Key:
                                    Description:  key is the label key that the selector applies to.
                                    Type:         string
                                  Operator:
                                    Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    Enum:
                                      In
                                      NotIn
                                      Exists
                                      DoesNotExist
                                    Type:  string
                                  Values:
                                    Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    Items:
                                      Type:  string
                                    Type:    array
                                Required:
                                  key
                                  operator
                                Type:  object
                              Type:    array
                            Match Labels:
                              Additional Properties:
                                Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                Max Length:   63
                                Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                Type:         string
                              Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              Type:           object
                          Type:               object
                        Type:                 array
                      To Entities:
                        Description:  ToEntities is a list of special entities to which the endpoint subject to the rule is allowed to initiate connections. Supported entities are `world`, `cluster` and `host`
                        Items:
                          Description:  Entity specifies the class of receiver/sender endpoints that do not have individual identities.  Entities are used to describe "outside of cluster", "host", etc.
                          Enum:
                            all
                            world
                            cluster
                            host
                            init
                            unmanaged
                            remote-node
                            health
                            none
                            kube-apiserver
                          Type:  string
                        Type:    array
                      To Groups:
                        Description:  ToGroups is a directive that allows the integration with multiple outside providers. Currently, only AWS is supported, and the rule can select by multiple sub directives: 
 Example: toGroups: - aws:     securityGroupsIds:     - 'sg-XXXXXXXXXXXXX'
                        Items:
                          Description:  ToGroups structure to store all kinds of new integrations that needs a new derivative policy.
                          Properties:
                            Aws:
                              Description:  AWSGroup is an structure that can be used to whitelisting information from AWS integration
                              Properties:
                                Labels:
                                  Additional Properties:
                                    Type:  string
                                  Type:    object
                                Region:
                                  Type:  string
                                Security Groups Ids:
                                  Items:
                                    Type:  string
                                  Type:    array
                                Security Groups Names:
                                  Items:
                                    Type:  string
                                  Type:    array
                              Type:        object
                          Type:            object
                        Type:              array
                      To Ports:
                        Description:  ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to connect to. 
 Example: Any endpoint with the label "role=frontend" is not allowed to initiate connections to destination port 8080/tcp
                        Items:
                          Description:  PortDenyRule is a list of ports/protocol that should be used for deny policies. This structure lacks the L7Rules since it's not supported in deny policies.
                          Properties:
                            Ports:
                              Description:  Ports is a list of L4 port/protocol
                              Items:
                                Description:  PortProtocol specifies an L4 port with an optional transport protocol
                                Properties:
                                  Port:
                                    Description:  Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form "1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.
                                    Pattern:      ^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$
                                    Type:         string
                                  Protocol:
                                    Description:  Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", ""/"ANY" 
 Matching on ICMP is not supported. 
 Named port specified for a container may narrow this down, but may not contradict this.
                                    Enum:
                                      TCP
                                      UDP
                                      ANY
                                    Type:  string
                                Required:
                                  port
                                Type:  object
                              Type:    array
                          Type:        object
                        Type:          array
                      To Requires:
                        Description:  ToRequires is a list of additional constraints which must be met in order for the selected endpoints to be able to connect to other endpoints. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching ToEndpoints. 
 Example: Any Endpoint with the label "team=A" requires any endpoint to which it communicates to also carry the label "team=A".
                        Items:
                          Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                          Properties:
                            Match Expressions:
                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              Items:
                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                Properties:
                                  Key:
                                    Description:  key is the label key that the selector applies to.
                                    Type:         string
                                  Operator:
                                    Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    Enum:
                                      In
                                      NotIn
                                      Exists
                                      DoesNotExist
                                    Type:  string
                                  Values:
                                    Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    Items:
                                      Type:  string
                                    Type:    array
                                Required:
                                  key
                                  operator
                                Type:  object
                              Type:    array
                            Match Labels:
                              Additional Properties:
                                Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                Max Length:   63
                                Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                Type:         string
                              Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              Type:           object
                          Type:               object
                        Type:                 array
                      To Services:
                        Description:  ToServices is a list of services to which the endpoint subject to the rule is allowed to initiate connections. Currently Cilium only supports toServices for K8s services without selectors. 
 Example: Any endpoint with the label "app=backend-app" is allowed to initiate connections to all cidrs backing the "external-service" service
                        Items:
                          Description:  Service wraps around selectors for services
                          Properties:
                            k8sService:
                              Description:  K8sService selects service by name and namespace pair
                              Properties:
                                Namespace:
                                  Type:  string
                                Service Name:
                                  Type:  string
                              Type:      object
                            k8sServiceSelector:
                              Description:  K8sServiceSelector selects services by k8s labels and namespace
                              Properties:
                                Namespace:
                                  Type:  string
                                Selector:
                                  Description:  ServiceSelector is a label selector for k8s services
                                  Properties:
                                    Match Expressions:
                                      Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      Items:
                                        Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        Properties:
                                          Key:
                                            Description:  key is the label key that the selector applies to.
                                            Type:         string
                                          Operator:
                                            Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            Enum:
                                              In
                                              NotIn
                                              Exists
                                              DoesNotExist
                                            Type:  string
                                          Values:
                                            Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            Items:
                                              Type:  string
                                            Type:    array
                                        Required:
                                          key
                                          operator
                                        Type:  object
                                      Type:    array
                                    Match Labels:
                                      Additional Properties:
                                        Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                        Max Length:   63
                                        Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                        Type:         string
                                      Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      Type:           object
                                  Type:               object
                              Required:
                                selector
                              Type:  object
                          Type:      object
                        Type:        array
                    Type:            object
                  Type:              array
                Endpoint Selector:
                  Description:  EndpointSelector selects all endpoints which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive.
                  Properties:
                    Match Expressions:
                      Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                      Items:
                        Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                        Properties:
                          Key:
                            Description:  key is the label key that the selector applies to.
                            Type:         string
                          Operator:
                            Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                            Enum:
                              In
                              NotIn
                              Exists
                              DoesNotExist
                            Type:  string
                          Values:
                            Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                            Items:
                              Type:  string
                            Type:    array
                        Required:
                          key
                          operator
                        Type:  object
                      Type:    array
                    Match Labels:
                      Additional Properties:
                        Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                        Max Length:   63
                        Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                        Type:         string
                      Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                      Type:           object
                  Type:               object
                Ingress:
                  Description:  Ingress is a list of IngressRule which are enforced at ingress. If omitted or empty, this rule does not apply at ingress.
                  Items:
                    Description:  IngressRule contains all rule types which can be applied at ingress, i.e. network traffic that originates outside of the endpoint and is entering the endpoint selected by the endpointSelector. 
 - All members of this structure are optional. If omitted or empty, the   member will have no effect on the rule. 
 - If multiple members are set, all of them need to match in order for   the rule to take effect. The exception to this rule is FromRequires field;   the effects of any Requires field in any rule will apply to all other   rules as well. 
 - FromEndpoints, FromCIDR, FromCIDRSet and FromEntities are mutually   exclusive. Only one of these members may be present within an individual   rule.
                    Properties:
                      From CIDR:
                        Description:  FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. 
 Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.3.9.1
                        Items:
                          Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                          Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                          Type:         string
                        Type:           array
                      From CIDR Set:
                        Description:  FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. 
 Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.
                        Items:
                          Description:  CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.
                          Properties:
                            Cidr:
                              Description:  CIDR is a CIDR prefix / IP Block.
                              Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                              Type:         string
                            Except:
                              Description:  ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
                              Items:
                                Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                                Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                                Type:         string
                              Type:           array
                          Required:
                            cidr
                          Type:  object
                        Type:    array
                      From Endpoints:
                        Description:  FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. 
 Example: Any endpoint with the label "role=backend" can be consumed by any endpoint carrying the label "role=frontend".
                        Items:
                          Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                          Properties:
                            Match Expressions:
                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              Items:
                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                Properties:
                                  Key:
                                    Description:  key is the label key that the selector applies to.
                                    Type:         string
                                  Operator:
                                    Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    Enum:
                                      In
                                      NotIn
                                      Exists
                                      DoesNotExist
                                    Type:  string
                                  Values:
                                    Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    Items:
                                      Type:  string
                                    Type:    array
                                Required:
                                  key
                                  operator
                                Type:  object
                              Type:    array
                            Match Labels:
                              Additional Properties:
                                Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                Max Length:   63
                                Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                Type:         string
                              Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              Type:           object
                          Type:               object
                        Type:                 array
                      From Entities:
                        Description:  FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`
                        Items:
                          Description:  Entity specifies the class of receiver/sender endpoints that do not have individual identities.  Entities are used to describe "outside of cluster", "host", etc.
                          Enum:
                            all
                            world
                            cluster
                            host
                            init
                            unmanaged
                            remote-node
                            health
                            none
                            kube-apiserver
                          Type:  string
                        Type:    array
                      From Requires:
                        Description:  FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. 
 Example: Any Endpoint with the label "team=A" requires consuming endpoint to also carry the label "team=A".
                        Items:
                          Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                          Properties:
                            Match Expressions:
                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              Items:
                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                Properties:
                                  Key:
                                    Description:  key is the label key that the selector applies to.
                                    Type:         string
                                  Operator:
                                    Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    Enum:
                                      In
                                      NotIn
                                      Exists
                                      DoesNotExist
                                    Type:  string
                                  Values:
                                    Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    Items:
                                      Type:  string
                                    Type:    array
                                Required:
                                  key
                                  operator
                                Type:  object
                              Type:    array
                            Match Labels:
                              Additional Properties:
                                Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                Max Length:   63
                                Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                Type:         string
                              Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              Type:           object
                          Type:               object
                        Type:                 array
                      Icmps:
                        Description:  ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is allowed to receive connections on. 
 Example: Any endpoint with the label "app=httpd" can only accept incoming type 8 ICMP connections.
                        Items:
                          Description:  ICMPRule is a list of ICMP fields.
                          Properties:
                            Fields:
                              Description:  Fields is a list of ICMP fields.
                              Items:
                                Description:  ICMPField is a ICMP field.
                                Properties:
                                  Family:
                                    Default:      IPv4
                                    Description:  Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
                                    Enum:
                                      IPv4
                                      IPv6
                                    Type:  string
                                  Type:
                                    Description:  Type is a ICMP-type. It should be 0-255 (8bit).
                                    Maximum:      255
                                    Minimum:      0
                                    Type:         integer
                                Required:
                                  type
                                Type:  object
                              Type:    array
                          Type:        object
                        Type:          array
                      To Ports:
                        Description:  ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is allowed to receive connections on. 
 Example: Any endpoint with the label "app=httpd" can only accept incoming connections on port 80/tcp.
                        Items:
                          Description:  PortRule is a list of ports/protocol combinations with optional Layer 7 rules which must be met.
                          Properties:
                            Originating TLS:
                              Description:  OriginatingTLS is the TLS context for the connections originated by the L7 proxy.  For egress policy this specifies the client-side TLS parameters for the upstream connection originating from the L7 proxy to the remote destination. For ingress policy this specifies the client-side TLS parameters for the connection from the L7 proxy to the local endpoint.
                              Properties:
                                Certificate:
                                  Description:  Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                                Private Key:
                                  Description:  PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                                Secret:
                                  Description:  Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.
                                  Properties:
                                    Name:
                                      Description:  Name is the name of the secret.
                                      Type:         string
                                    Namespace:
                                      Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                      Type:         string
                                  Required:
                                    name
                                  Type:  object
                                Trusted CA:
                                  Description:  TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                              Required:
                                secret
                              Type:  object
                            Ports:
                              Description:  Ports is a list of L4 port/protocol
                              Items:
                                Description:  PortProtocol specifies an L4 port with an optional transport protocol
                                Properties:
                                  Port:
                                    Description:  Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form "1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.
                                    Pattern:      ^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$
                                    Type:         string
                                  Protocol:
                                    Description:  Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", ""/"ANY" 
 Matching on ICMP is not supported. 
 Named port specified for a container may narrow this down, but may not contradict this.
                                    Enum:
                                      TCP
                                      UDP
                                      ANY
                                    Type:  string
                                Required:
                                  port
                                Type:  object
                              Type:    array
                            Rules:
                              Description:  Rules is a list of additional port level rules which must be met in order for the PortRule to allow the traffic. If omitted or empty, no layer 7 rules are enforced.
                              Properties:
                                Dns:
                                  Description:  DNS-specific rules.
                                  Items:
                                    Description:  PortRuleDNS is a list of allowed DNS lookups.
                                    Properties:
                                      Match Name:
                                        Description:  MatchName matches literal DNS names. A trailing "." is automatically added when missing.
                                        Pattern:      ^([-a-zA-Z0-9_]+[.]?)+$
                                        Type:         string
                                      Match Pattern:
                                        Description:  MatchPattern allows using wildcards to match DNS names. All wildcards are case insensitive. The wildcards are: - "*" matches 0 or more DNS valid characters, and may occur anywhere in the pattern. As a special case a "*" as the leftmost character, without a following "." matches all subdomains as well as the name to the right. A trailing "." is automatically added when missing. 
 Examples: `*.cilium.io` matches subomains of cilium at that level   www.cilium.io and blog.cilium.io match, cilium.io and google.com do not `*cilium.io` matches cilium.io and all subdomains 1 level below   www.cilium.io, blog.cilium.io and cilium.io match, google.com does not sub*.cilium.io matches subdomains of cilium where the subdomain component begins with "sub"   sub.cilium.io and subdomain.cilium.io match, www.cilium.io,   blog.cilium.io, cilium.io and google.com do not
                                        Pattern:  ^([-a-zA-Z0-9_*]+[.]?)+$
                                        Type:     string
                                    Type:         object
                                  Type:           array
                                Http:
                                  Description:  HTTP specific rules.
                                  Items:
                                    Description:  PortRuleHTTP is a list of HTTP protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect. 
 All fields of this type are extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986.
                                    Properties:
                                      Header Matches:
                                        Description:  HeaderMatches is a list of HTTP headers which must be present and match against the given values. Mismatch field can be used to specify what to do when there is no match.
                                        Items:
                                          Description:  HeaderMatch extends the HeaderValue for matching requirement of a named header field against an immediate string, a secret value, or a regex.  If none of the optional fields is present, then the header value is not matched, only presence of the header is enough.
                                          Properties:
                                            Mismatch:
                                              Description:  Mismatch identifies what to do in case there is no match. The default is to drop the request. Otherwise the overall rule is still considered as matching, but the mismatches are logged in the access log.
                                              Enum:
                                                LOG
                                                ADD
                                                DELETE
                                                REPLACE
                                              Type:  string
                                            Name:
                                              Description:  Name identifies the header.
                                              Type:         string
                                            Secret:
                                              Description:  Secret refers to a secret that contains the value to be matched against. The secret must only contain one entry. If the referred secret does not exist, and there is no "Value" specified, the match will fail.
                                              Properties:
                                                Name:
                                                  Description:  Name is the name of the secret.
                                                  Type:         string
                                                Namespace:
                                                  Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                                  Type:         string
                                              Required:
                                                name
                                              Type:  object
                                            Value:
                                              Description:  Value matches the exact value of the header. Can be specified either alone or together with "Secret"; will be used as the header value if the secret can not be found in the latter case.
                                              Type:         string
                                          Required:
                                            name
                                          Type:  object
                                        Type:    array
                                      Headers:
                                        Description:  Headers is a list of HTTP headers which must be present in the request. If omitted or empty, requests are allowed regardless of headers present.
                                        Items:
                                          Type:  string
                                        Type:    array
                                      Host:
                                        Description:  Host is an extended POSIX regex matched against the host header of a request, e.g. "foo.com" 
 If omitted or empty, the value of the host header is ignored.
                                        Format:  idn-hostname
                                        Type:    string
                                      Method:
                                        Description:  Method is an extended POSIX regex matched against the method of a request, e.g. "GET", "POST", "PUT", "PATCH", "DELETE", ... 
 If omitted or empty, all methods are allowed.
                                        Type:  string
                                      Path:
                                        Description:  Path is an extended POSIX regex matched against the path of a request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. 
 If omitted or empty, all paths are all allowed.
                                        Type:  string
                                    Type:      object
                                  Type:        array
                                Kafka:
                                  Description:  Kafka-specific rules.
                                  Items:
                                    Description:  PortRule is a list of Kafka protocol constraints. All fields are optional, if all fields are empty or missing, the rule will match all Kafka messages.
                                    Properties:
                                      API Key:
                                        Description:  APIKey is a case-insensitive string matched against the key of a request, e.g. "produce", "fetch", "createtopic", "deletetopic", et al Reference: https://kafka.apache.org/protocol#protocol_api_keys 
 If omitted or empty, and if Role is not specified, then all keys are allowed.
                                        Type:  string
                                      API Version:
                                        Description:  APIVersion is the version matched against the api version of the Kafka message. If set, it has to be a string representing a positive integer. 
 If omitted or empty, all versions are allowed.
                                        Type:  string
                                      Client ID:
                                        Description:  ClientID is the client identifier as provided in the request. 
 From Kafka protocol documentation: This is a user supplied identifier for the client application. The user can use any identifier they like and it will be used when logging errors, monitoring aggregates, etc. For example, one might want to monitor not just the requests per second overall, but the number coming from each client application (each of which could reside on multiple servers). This id acts as a logical grouping across all requests from a particular client. 
 If omitted or empty, all client identifiers are allowed.
                                        Type:  string
                                      Role:
                                        Description:  Role is a case-insensitive string and describes a group of API keys necessary to perform certain higher-level Kafka operations such as "produce" or "consume". A Role automatically expands into all APIKeys required to perform the specified higher-level operation. 
 The following values are supported:  - "produce": Allow producing to the topics specified in the rule  - "consume": Allow consuming from the topics specified in the rule 
 This field is incompatible with the APIKey field, i.e APIKey and Role cannot both be specified in the same rule. 
 If omitted or empty, and if APIKey is not specified, then all keys are allowed.
                                        Enum:
                                          produce
                                          consume
                                        Type:  string
                                      Topic:
                                        Description:  Topic is the topic name contained in the message. If a Kafka request contains multiple topics, then all topics must be allowed or the message will be rejected. 
 This constraint is ignored if the matched request message type doesn't contain any topic. Maximum size of Topic can be 249 characters as per recent Kafka spec and allowed characters are a-z, A-Z, 0-9, -, . and _. 
 Older Kafka versions had longer topic lengths of 255, but in Kafka 0.10 version the length was changed from 255 to 249. For compatibility reasons we are using 255. 
 If omitted or empty, all topics are allowed.
                                        Max Length:  255
                                        Type:        string
                                    Type:            object
                                  Type:              array
                                l7:
                                  Description:  Key-value pair rules.
                                  Items:
                                    Additional Properties:
                                      Type:       string
                                    Description:  PortRuleL7 is a list of key-value pairs interpreted by a L7 protocol as protocol constraints. All fields are optional, if all fields are empty or missing, the rule does not have any effect.
                                    Type:         object
                                  Type:           array
                                l7proto:
                                  Description:  Name of the L7 protocol for which the Key-value pair rules apply.
                                  Type:         string
                              Type:             object
                            Terminating TLS:
                              Description:  TerminatingTLS is the TLS context for the connection terminated by the L7 proxy.  For egress policy this specifies the server-side TLS parameters to be applied on the connections originated from the local endpoint and terminated by the L7 proxy. For ingress policy this specifies the server-side TLS parameters to be applied on the connections originated from a remote source and terminated by the L7 proxy.
                              Properties:
                                Certificate:
                                  Description:  Certificate is the file name or k8s secret item name for the certificate chain. If omitted, 'tls.crt' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                                Private Key:
                                  Description:  PrivateKey is the file name or k8s secret item name for the private key matching the certificate chain. If omitted, 'tls.key' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                                Secret:
                                  Description:  Secret is the secret that contains the certificates and private key for the TLS context. By default, Cilium will search in this secret for the following items:  - 'ca.crt'  - Which represents the trusted CA to verify remote source.  - 'tls.crt' - Which represents the public key certificate.  - 'tls.key' - Which represents the private key matching the public key                certificate.
                                  Properties:
                                    Name:
                                      Description:  Name is the name of the secret.
                                      Type:         string
                                    Namespace:
                                      Description:  Namespace is the namespace in which the secret exists. Context of use determines the default value if left out (e.g., "default").
                                      Type:         string
                                  Required:
                                    name
                                  Type:  object
                                Trusted CA:
                                  Description:  TrustedCA is the file name or k8s secret item name for the trusted CA. If omitted, 'ca.crt' is assumed, if it exists. If given, the item must exist.
                                  Type:         string
                              Required:
                                secret
                              Type:  object
                          Type:      object
                        Type:        array
                    Type:            object
                  Type:              array
                Ingress Deny:
                  Description:  IngressDeny is a list of IngressDenyRule which are enforced at ingress. Any rule inserted here will by denied regardless of the allowed ingress rules in the 'ingress' field. If omitted or empty, this rule does not apply at ingress.
                  Items:
                    Description:  IngressDenyRule contains all rule types which can be applied at ingress, i.e. network traffic that originates outside of the endpoint and is entering the endpoint selected by the endpointSelector. 
 - All members of this structure are optional. If omitted or empty, the   member will have no effect on the rule. 
 - If multiple members are set, all of them need to match in order for   the rule to take effect. The exception to this rule is FromRequires field;   the effects of any Requires field in any rule will apply to all other   rules as well. 
 - FromEndpoints, FromCIDR, FromCIDRSet and FromEntities are mutually   exclusive. Only one of these members may be present within an individual   rule.
                    Properties:
                      From CIDR:
                        Description:  FromCIDR is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from. Only connections which do *not* originate from the cluster or from the local host are subject to CIDR rules. In order to allow in-cluster connectivity, use the FromEndpoints field.  This will match on the source IP address of incoming connections. Adding  a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is  equivalent.  Overlaps are allowed between FromCIDR and FromCIDRSet. 
 Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.3.9.1
                        Items:
                          Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                          Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                          Type:         string
                        Type:           array
                      From CIDR Set:
                        Description:  FromCIDRSet is a list of IP blocks which the endpoint subject to the rule is allowed to receive connections from in addition to FromEndpoints, along with a list of subnets contained within their corresponding IP block from which traffic should not be allowed. This will match on the source IP address of incoming connections. Adding a prefix into FromCIDR or into FromCIDRSet with no ExcludeCIDRs is equivalent. Overlaps are allowed between FromCIDR and FromCIDRSet. 
 Example: Any endpoint with the label "app=my-legacy-pet" is allowed to receive connections from 10.0.0.0/8 except from IPs in subnet 10.96.0.0/12.
                        Items:
                          Description:  CIDRRule is a rule that specifies a CIDR prefix to/from which outside communication  is allowed, along with an optional list of subnets within that CIDR prefix to/from which outside communication is not allowed.
                          Properties:
                            Cidr:
                              Description:  CIDR is a CIDR prefix / IP Block.
                              Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                              Type:         string
                            Except:
                              Description:  ExceptCIDRs is a list of IP blocks which the endpoint subject to the rule is not allowed to initiate connections to. These CIDR prefixes should be contained within Cidr. These exceptions are only applied to the Cidr in this CIDRRule, and do not apply to any other CIDR prefixes in any other CIDRRules.
                              Items:
                                Description:  CIDR specifies a block of IP addresses. Example: 192.0.2.1/32
                                Pattern:      ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\/([0-9]|[1-2][0-9]|3[0-2])$|^s*((([0-9A-Fa-f]{1,4}:){7}(:|([0-9A-Fa-f]{1,4})))|(([0-9A-Fa-f]{1,4}:){6}:([0-9A-Fa-f]{1,4})?)|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){0,1}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){0,2}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){0,3}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){0,4}):([0-9A-Fa-f]{1,4})?))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){0,5}):([0-9A-Fa-f]{1,4})?))|(:(:|((:[0-9A-Fa-f]{1,4}){1,7}))))(%.+)?s*/([0-9]|[1-9][0-9]|1[0-1][0-9]|12[0-8])$
                                Type:         string
                              Type:           array
                          Required:
                            cidr
                          Type:  object
                        Type:    array
                      From Endpoints:
                        Description:  FromEndpoints is a list of endpoints identified by an EndpointSelector which are allowed to communicate with the endpoint subject to the rule. 
 Example: Any endpoint with the label "role=backend" can be consumed by any endpoint carrying the label "role=frontend".
                        Items:
                          Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                          Properties:
                            Match Expressions:
                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              Items:
                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                Properties:
                                  Key:
                                    Description:  key is the label key that the selector applies to.
                                    Type:         string
                                  Operator:
                                    Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    Enum:
                                      In
                                      NotIn
                                      Exists
                                      DoesNotExist
                                    Type:  string
                                  Values:
                                    Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    Items:
                                      Type:  string
                                    Type:    array
                                Required:
                                  key
                                  operator
                                Type:  object
                              Type:    array
                            Match Labels:
                              Additional Properties:
                                Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                Max Length:   63
                                Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                Type:         string
                              Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              Type:           object
                          Type:               object
                        Type:                 array
                      From Entities:
                        Description:  FromEntities is a list of special entities which the endpoint subject to the rule is allowed to receive connections from. Supported entities are `world`, `cluster` and `host`
                        Items:
                          Description:  Entity specifies the class of receiver/sender endpoints that do not have individual identities.  Entities are used to describe "outside of cluster", "host", etc.
                          Enum:
                            all
                            world
                            cluster
                            host
                            init
                            unmanaged
                            remote-node
                            health
                            none
                            kube-apiserver
                          Type:  string
                        Type:    array
                      From Requires:
                        Description:  FromRequires is a list of additional constraints which must be met in order for the selected endpoints to be reachable. These additional constraints do no by itself grant access privileges and must always be accompanied with at least one matching FromEndpoints. 
 Example: Any Endpoint with the label "team=A" requires consuming endpoint to also carry the label "team=A".
                        Items:
                          Description:  EndpointSelector is a wrapper for k8s LabelSelector.
                          Properties:
                            Match Expressions:
                              Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                              Items:
                                Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                Properties:
                                  Key:
                                    Description:  key is the label key that the selector applies to.
                                    Type:         string
                                  Operator:
                                    Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                    Enum:
                                      In
                                      NotIn
                                      Exists
                                      DoesNotExist
                                    Type:  string
                                  Values:
                                    Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                    Items:
                                      Type:  string
                                    Type:    array
                                Required:
                                  key
                                  operator
                                Type:  object
                              Type:    array
                            Match Labels:
                              Additional Properties:
                                Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                                Max Length:   63
                                Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                                Type:         string
                              Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                              Type:           object
                          Type:               object
                        Type:                 array
                      Icmps:
                        Description:  ICMPs is a list of ICMP rule identified by type number which the endpoint subject to the rule is not allowed to receive connections on. 
 Example: Any endpoint with the label "app=httpd" can not accept incoming type 8 ICMP connections.
                        Items:
                          Description:  ICMPRule is a list of ICMP fields.
                          Properties:
                            Fields:
                              Description:  Fields is a list of ICMP fields.
                              Items:
                                Description:  ICMPField is a ICMP field.
                                Properties:
                                  Family:
                                    Default:      IPv4
                                    Description:  Family is a IP address version. Currently, we support `IPv4` and `IPv6`. `IPv4` is set as default.
                                    Enum:
                                      IPv4
                                      IPv6
                                    Type:  string
                                  Type:
                                    Description:  Type is a ICMP-type. It should be 0-255 (8bit).
                                    Maximum:      255
                                    Minimum:      0
                                    Type:         integer
                                Required:
                                  type
                                Type:  object
                              Type:    array
                          Type:        object
                        Type:          array
                      To Ports:
                        Description:  ToPorts is a list of destination ports identified by port number and protocol which the endpoint subject to the rule is not allowed to receive connections on. 
 Example: Any endpoint with the label "app=httpd" can not accept incoming connections on port 80/tcp.
                        Items:
                          Description:  PortDenyRule is a list of ports/protocol that should be used for deny policies. This structure lacks the L7Rules since it's not supported in deny policies.
                          Properties:
                            Ports:
                              Description:  Ports is a list of L4 port/protocol
                              Items:
                                Description:  PortProtocol specifies an L4 port with an optional transport protocol
                                Properties:
                                  Port:
                                    Description:  Port is an L4 port number. For now the string will be strictly parsed as a single uint16. In the future, this field may support ranges in the form "1024-2048 Port can also be a port name, which must contain at least one [a-z], and may also contain [0-9] and '-' anywhere except adjacent to another '-' or in the beginning or the end.
                                    Pattern:      ^(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{4}|[0-9]{1,4})|([a-zA-Z0-9]-?)*[a-zA-Z](-?[a-zA-Z0-9])*$
                                    Type:         string
                                  Protocol:
                                    Description:  Protocol is the L4 protocol. If omitted or empty, any protocol matches. Accepted values: "TCP", "UDP", ""/"ANY" 
 Matching on ICMP is not supported. 
 Named port specified for a container may narrow this down, but may not contradict this.
                                    Enum:
                                      TCP
                                      UDP
                                      ANY
                                    Type:  string
                                Required:
                                  port
                                Type:  object
                              Type:    array
                          Type:        object
                        Type:          array
                    Type:              object
                  Type:                array
                Labels:
                  Description:  Labels is a list of optional strings which can be used to re-identify the rule or to store metadata. It is possible to lookup or delete strings based on labels. Labels are not required to be unique, multiple rules can have overlapping or identical labels.
                  Items:
                    Description:  Label is the Cilium's representation of a container label.
                    Properties:
                      Key:
                        Type:  string
                      Source:
                        Description:  Source can be one of the above values (e.g.: LabelSourceContainer).
                        Type:         string
                      Value:
                        Type:  string
                    Required:
                      key
                    Type:  object
                  Type:    array
                Node Selector:
                  Description:  NodeSelector selects all nodes which should be subject to this rule. EndpointSelector and NodeSelector cannot be both empty and are mutually exclusive. Can only be used in CiliumClusterwideNetworkPolicies.
                  Properties:
                    Match Expressions:
                      Description:  matchExpressions is a list of label selector requirements. The requirements are ANDed.
                      Items:
                        Description:  A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                        Properties:
                          Key:
                            Description:  key is the label key that the selector applies to.
                            Type:         string
                          Operator:
                            Description:  operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                            Enum:
                              In
                              NotIn
                              Exists
                              DoesNotExist
                            Type:  string
                          Values:
                            Description:  values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                            Items:
                              Type:  string
                            Type:    array
                        Required:
                          key
                          operator
                        Type:  object
                      Type:    array
                    Match Labels:
                      Additional Properties:
                        Description:  MatchLabelsValue represents the value from the MatchLabels {key,value} pair.
                        Max Length:   63
                        Pattern:      ^(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])?$
                        Type:         string
                      Description:    matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                      Type:           object
                  Type:               object
              Type:                   object
            Type:                     array
          Status:
            Description:  Status is the status of the Cilium policy rule
            Properties:
              Derivative Policies:
                Additional Properties:
                  Description:  CiliumNetworkPolicyNodeStatus is the status of a Cilium policy rule for a specific node.
                  Properties:
                    Annotations:
                      Additional Properties:
                        Type:       string
                      Description:  Annotations corresponds to the Annotations in the ObjectMeta of the CNP that have been realized on the node for CNP. That is, if a CNP has been imported and has been assigned annotation X=Y by the user, Annotations in CiliumNetworkPolicyNodeStatus will be X=Y once the CNP that was imported corresponding to Annotation X=Y has been realized on the node.
                      Type:         object
                    Enforcing:
                      Description:  Enforcing is set to true once all endpoints present at the time the policy has been imported are enforcing this policy.
                      Type:         boolean
                    Error:
                      Description:  Error describes any error that occurred when parsing or importing the policy, or realizing the policy for the endpoints to which it applies on the node.
                      Type:         string
                    Last Updated:
                      Description:  LastUpdated contains the last time this status was updated
                      Format:       date-time
                      Type:         string
                    Local Policy Revision:
                      Description:  Revision is the policy revision of the repository which first implemented this policy.
                      Format:       int64
                      Type:         integer
                    Ok:
                      Description:  OK is true when the policy has been parsed and imported successfully into the in-memory policy repository on the node.
                      Type:         boolean
                  Type:             object
                Description:        DerivativePolicies is the status of all policies derived from the Cilium policy
                Type:               object
              Nodes:
                Additional Properties:
                  Description:  CiliumNetworkPolicyNodeStatus is the status of a Cilium policy rule for a specific node.
                  Properties:
                    Annotations:
                      Additional Properties:
                        Type:       string
                      Description:  Annotations corresponds to the Annotations in the ObjectMeta of the CNP that have been realized on the node for CNP. That is, if a CNP has been imported and has been assigned annotation X=Y by the user, Annotations in CiliumNetworkPolicyNodeStatus will be X=Y once the CNP that was imported corresponding to Annotation X=Y has been realized on the node.
                      Type:         object
                    Enforcing:
                      Description:  Enforcing is set to true once all endpoints present at the time the policy has been imported are enforcing this policy.
                      Type:         boolean
                    Error:
                      Description:  Error describes any error that occurred when parsing or importing the policy, or realizing the policy for the endpoints to which it applies on the node.
                      Type:         string
                    Last Updated:
                      Description:  LastUpdated contains the last time this status was updated
                      Format:       date-time
                      Type:         string
                    Local Policy Revision:
                      Description:  Revision is the policy revision of the repository which first implemented this policy.
                      Format:       int64
                      Type:         integer
                    Ok:
                      Description:  OK is true when the policy has been parsed and imported successfully into the in-memory policy repository on the node.
                      Type:         boolean
                  Type:             object
                Description:        Nodes is the Cilium policy status for each node
                Type:               object
            Type:                   object
        Required:
          metadata
        Type:  object
    Served:    true
    Storage:   true
    Subresources:
      Status:
Status:
  Accepted Names:
    Kind:       CiliumNetworkPolicy
    List Kind:  CiliumNetworkPolicyList
    Plural:     ciliumnetworkpolicies
    Short Names:
      cnp
      ciliumnp
    Singular:  ciliumnetworkpolicy
  Conditions:
    Last Transition Time:  2022-11-04T03:45:13Z
    Message:               no conflicts found
    Reason:                NoConflicts
    Status:                True
    Type:                  NamesAccepted
    Last Transition Time:  2022-11-04T03:45:13Z
    Message:               the initial names have been accepted
    Reason:                InitialNamesAccepted
    Status:                True
    Type:                  Established
  Stored Versions:
    v2
Events:  <none>
